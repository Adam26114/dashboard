// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url  	= env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserRole{
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Billboard{
  id        String @id @default(uuid())
  label String
  imageUrl String
  categories Category[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category{
  id String @id @default(uuid())
  billboardId String
  billboard Billboard @relation(fields: [billboardId],references: [id])
  product Product[] @relation("CategoryToProduct")
  name String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([billboardId])
}

model Size{
  id String @id @default(uuid())
  storeId String
  name String  
  value String
  product Product[]
  createdAt DateTime @default(now())  
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color{
  id String @id @default(uuid())
  storeId String
  name String  
  value String
  product Product[]
  createdAt DateTime @default(now())  
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Product{
  id String @id @default(uuid())
  categoryId String
  category Category @relation("CategoryToProduct",fields: [categoryId],references:[id])
  name String
  price Decimal
  description String
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId] ,references: [id])
  colorId String
  color Color @relation(fields: [colorId] ,references: [id])
  images Image[]
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image{
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId],references: [id],onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([productId])
}

model Order{
  id String @id @default(uuid())
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  paymentMethod PaymentMethod @default(PREPAID)

  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

enum PaymentMethod {
  COD
  PREPAID
}

model OrderItem{
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId],references: [id])
  productId String
  product Product @relation(fields: [productId],references: [id])

  @@index([orderId])
  @@index([productId])
}
